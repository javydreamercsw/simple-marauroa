<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="Marauroa-Simple-Server" default="default" basedir=".">
    <description>Builds, tests, and runs the project Marauroa-Simple-Server.</description>
    <import file="nbproject/build-impl.xml"/>
    <property file="build.ant.properties"/>
    <property name="original.project.dir" value="../../marauroa"/>
    <available file="${original.project.dir}/build.xml" property="custom.marauroa.present"/>
    <property name="super.lib.dir" value="../../Simple Libs"/>
    <property name="lib.dir" value="./Simple Libs"/>
    <!--Check to see if Simple Libs is present to update my libraries-->
    <condition property="simple.libs.exists">
        <available file="${super.lib.dir}" type="dir"/>
    </condition>
    
    <target name="jar">
        <antcall target="Marauroa-Simple-Server-impl.jar"/>
    </target>
    
    <target name="-updateLibs" if="simple.libs.exists">
        <echo>Updating libraries</echo>
        <delete includeemptydirs="true">
            <fileset dir="${lib.dir}" includes="**/*"/>
        </delete>
        <mkdir dir="${lib.dir}"/>
        <copy todir="${lib.dir}"> 
            <fileset dir="${super.lib.dir}"/>
        </copy>
    </target>

    <target name="-post-compile">
        <copy file="server.ini" todir="dist/"/>
        <mkdir dir="${dist}/log/"/>
    </target>

    <target name="-post-jar">
        <antcall target="update_bat"/>
    </target>
	
    <target name="can-update-simple-libs">
        <condition property="update-simple-libs">
            <and>
                <not>
                    <equals arg1="${simple.libs.exists}" arg2="$${simple.libs.exists}" />
                </not>
                <not>
                    <equals arg1="${custom.marauroa.present}" arg2="$${custom.marauroa.present}" />
                </not>
                <not>
                    <equals arg1="${simple-libs-updated}" arg2="$${simple-libs-updated}" />
                </not>
            </and>
        </condition>
    </target>
    
    <target name="update-simple-libs" depends="can-update-simple-libs" if="update-simple-libs">
        <delete file="${lib.dir}/marauroa.jar"/>
        <copy todir="${lib.dir}" 
              file="${original.project.dir}/build-archive/marauroa.jar"/>
        <property name="simple-libs-updated" value="true"/>
    </target>

    <target name="update_bat">
        <path id="build.classpath">
            <fileset dir="${dist}">
                <include name="/lib/*.jar" />
            </fileset>
        </path>
        <!-- convert classpath to a flat list/string for use in manifest task -->
        <pathconvert property="mf.classpath" pathsep=";lib\">
            <path refid="build.classpath" />
            <flattenmapper />
        </pathconvert>
        <echo file="marauroad.bat" append="false">set LOCAL_CLASSPATH=marauroa-simple-server.jar;lib\${mf.classpath};&#13;&#10;</echo>
        <echo file="marauroad.bat" append="true">java -cp "%LOCAL_CLASSPATH%" marauroa.server.marauroad -c server.ini -l</echo>
        <copy file="marauroad.bat" todir="dist/"/>
    </target>

    <target name="dist_source">

        <mkdir dir="${dist}/marauroa-simple-server-${version}-src"/>

        <copy todir="${dist}/marauroa-simple-server-${version}-src/src">
            <fileset dir="src"/>
        </copy>

        <mkdir dir="${dist}/marauroa-simple-server-${version}-src/lib"/>

        <copy todir="${dist}/marauroa-simple-server-${version}-src/lib">
            <fileset dir="${dist}/lib"/>
        </copy>

        <copy todir="${dist}/marauroa-simple-server-${version}-src/test">
            <fileset dir="test"/>
        </copy>

        <copy todir="${dist}/marauroa-simple-server-${version}-src" file="build.xml"/>
        <copy todir="${dist}/marauroa-simple-server-${version}-src" file="build.ant.properties"/>

        <copy todir="${dist}/marauroa-simple-server-${version}-src/src">
            <fileset dir="src"/>
        </copy>
        
        <tar destfile="${dist}/marauroa-simple-server-${version}-src.tar.gz" compression="gzip" longfile="truncate">
            <tarfileset dir="${dist}/marauroa-simple-server-${version}-src" prefix="marauroa-simple-server-${version}-src">
                <exclude name="**/.svn/**"/>
            </tarfileset>
        </tar>

        <zip destfile="${dist}/marauroa-simple-server-${version}-src.zip">
            <zipfileset dir="${dist}/marauroa-simple-server-${version}-src" prefix="marauroa-simple-server-${version}-src">
                <exclude name="**/.svn/**"/>
            </zipfileset>
        </zip>

        <delete dir="${dist}/marauroa-simple-server-${version}-src"/>
    </target>
    <target name="dist_binary" depends="jar">

        <mkdir dir="${dist}/marauroa-simple-server-${version}-release"/>

        <mkdir dir="${dist}/marauroa-simple-server-${version}-release/lib"/>

        <copy todir="${dist}/marauroa-simple-server-${version}-release/lib">
            <fileset dir="${dist}/lib"/>
        </copy>

        <copy todir="${dist}/marauroa-simple-server-${version}-release" file="marauroad.bat"/>

        <copy todir="${dist}/marauroa-simple-server-${version}-release" file="server.ini"/>

        <move todir="${dist}/marauroa-simple-server-${version}-release" file="${dist.jar}"/>
        
        <zip destfile="${dist}/marauroa-simple-server-${version}-release.zip">
            <zipfileset dir="${dist}/marauroa-simple-server-${version}-release" prefix="marauroa-simple-server-${version}-release">
                <exclude name="**/.svn/**"/>
            </zipfileset>
        </zip>

        <delete dir="${dist}/marauroa-simple-server-${version}-release"/>
    </target>

    <target name="release" depends="dist_binary, dist_source, package-for-store" description="Creates all the packages needed for a Simple-Server release"/>
    <target name="sign_jars" depends="-do-init, clean, compile" unless="exclude.signing">
        <signjar alias="${keystore.alias}" keystore="keystore.ks" storepass="${keystore.password}">
            <fileset dir="${dist}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset file="${log4j_jar}"/>
            <fileset file="${marauroa_jar}"/>
        </signjar>
    </target>
    
    <target name="-pre-init">
        <!-- We update the version number -->
        <replaceregexp file="server.ini"
                       match="server_version?=?.*"
                       replace="server_version = ${version}"
                       byline="true"/>
    </target>
    
    <target name="-pre-compile" depends="-copy-libs">       
        <antcall target="compile-custom-marauroa"/>
    </target>
    
    <target name="-copy-libs" if="simple.libs.exists">
        <!--Update local libraries-->
        <mkdir dir="Simple Libs"/>
        <copy todir="Simple Libs">
            <fileset dir="${simple.libs}"/>
        </copy>
    </target>

    
    <target name="clean" depends="clean-custom-marauroa, Marauroa-Simple-Server-impl.clean"/>
    
    <target name="clean-custom-marauroa" if="custom.marauroa.present">
        <echo message="Cleaning ${original.project.dir}"/>
        <ant dir="${original.project.dir}" usenativebasedir="true"
             target="clean" inheritall="false" inheritrefs="false"/>
        <echo message="Done cleaning ${original.project.dir}"/>
    </target>
    
    <target name="compile-custom-marauroa" if="custom.marauroa.present">
        <echo message="Building ${original.project.dir}"/>
        <ant dir="${original.project.dir}" usenativebasedir="true"
             target="jar" inheritall="false" inheritrefs="false"/>
        <echo message="Done building ${original.project.dir}"/>
        <copy todir="../lib" 
              file="${original.project.dir}/build-archive/marauroa.jar"/>
    </target>
    
    <target name="package-for-store" depends="jar">
        <property name="store.dir" value="store"/>
        <property name="store.jar" value="${store.dir}/${store.jar.name}.jar"/>

        <echo message="Packaging ${application.title} into a single JAR at ${store.jar}"/>

        <delete dir="${store.dir}"/>
        <mkdir dir="${store.dir}"/>

        <jar destfile="${store.dir}/temp_final.jar" filesetmanifest="skip">
            <zipgroupfileset dir="${dist}" includes="*.jar"/>
            <zipgroupfileset dir="${dist}/lib" includes="*.jar"/>

            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>

        <zip destfile="${store.jar}">
            <zipfileset src="${store.dir}/temp_final.jar"
                        excludes="META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA"/>
        </zip>

        <delete file="${store.dir}/temp_final.jar"/>
        <copy todir="${dist}" file="${store.dir}/${store.jar.name}.jar"/>
        <delete dir="${dist}/lib"/>
        <delete dir="${store.dir}"/>
    </target>
        
    <target name="remove-svn-history">
        <replaceregexp byline="false" match="(?s)\A/\*.*?\*/" replace="">
            <fileset dir="src" includes="**/*.java"/>
        </replaceregexp>
    </target>

    <target name="pmd" if="simple.libs.exists">
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
            <classpath>
                <pathelement location="${lib.dir}/tools/PMD/pmd-4.3.jar"/>
            </classpath>
        </taskdef>
        <mkdir dir="../reports/pmd"/>
        <delete file = "../reports/pmd/pmd.xml"/> 
        <touch file = "../reports/pmd/pmd.xml" /> 
        <pmd rulesetfiles="basic,design">
            <formatter type="xml" toFile="../reports/pmd/pmd.xml"/>
            <fileset dir="./src">
                <include name="**/*.java"/>
            </fileset>
        </pmd>
    </target>
    
    <target name="-pre-compile-test" >
        <path id="cobertura.classpath">
            <fileset dir="${lib.dir}/tools/Cobertura/">
                <include name="cobertura.jar" />
                <include name="lib/**/*.jar" />
            </fileset>
        </path>
        <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
        <delete dir="${build.instrumented.dir}" />
        <delete dir="${build.report.cobertura.dir}" />
        <mkdir dir="${build.instrumented.dir}" />
        <mkdir dir="${build.report.cobertura.dir}" />
        <cobertura-instrument todir="${build.instrumented.dir}">
            <fileset dir="${build.classes.dir}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>
    
    <target name="-post-test-run">
        <!-- You can disable the html portion if you are using the hudson plugin and rely on the xml -->
        <cobertura-report format="html" srcdir="${src.dir}" destdir="${build.report.cobertura.dir}"/>
        <!-- Used by the hudson plug-in -->
        <cobertura-report format="xml" srcdir="${src.dir}" destdir="${build.report.cobertura.dir}"/>
        <delete file="cobertura.ser" />
    </target>
</project>
